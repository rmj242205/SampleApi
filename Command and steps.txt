Azure DevOps



SP.NET Core Web API project with CICD action using GitHub Actions step by step with code?


ChatGPT said:
Here's a step-by-step guide to set up a complete ASP.NET Core Web API project with a CI/CD pipeline using GitHub Actions, including the code and deployment to Azure App Service.

‚úÖ What You‚Äôll Get
üß± ASP.NET Core Web API Project Sample

üîÅ GitHub Actions Workflow (.yml) to:

Restore, build, test, publish, and deploy

üîê Azure Publish Profile for secure deployment

üìÑ Full instructions for each step

üß± 1. Sample ASP.NET Core Web API Project
Create your project:

bash
Copy
Edit
dotnet new webapi -n SampleApi
cd SampleApi
Add a simple controller:

csharp
Copy
Edit
// Controllers/HelloController.cs
using Microsoft.AspNetCore.Mvc;

[ApiController]
[Route("[controller]")]
public class HelloController : ControllerBase
{
    [HttpGet]
    public string Get() => "Hello from CI/CD Web API!";
}
üõ† 2. Push Your Project to GitHub
Create a new repository on GitHub (e.g., SampleApi)

Initialize Git locally and push:

bash
Copy
Edit
git init
git remote add origin https://github.com/<your-username>/SampleApi.git
git add .
git commit -m "Initial commit"
git push -u origin main
‚òÅÔ∏è 3. Create Azure App Service + Download Publish Profile
Go to Azure Portal > App Services > + Create

Stack: .NET 8, App Name: sample-api-cicd, Region: any

Once created, go to Overview > Get Publish Profile

Save the .PublishSettings file

Copy its contents (open in Notepad)

üîê 4. Add GitHub Secrets
Go to your GitHub repo ‚Üí Settings > Secrets and variables > Actions

Add two secrets:

Name	Value
AZURE_WEBAPP_NAME	sample-api-cicd
AZURE_WEBAPP_PUBLISH_PROFILE	Paste contents of .PublishSettings

üåÄ 5. Create GitHub Actions Workflow
Create the file:
üìÑ .github/workflows/deploy.yml

yaml
Copy
Edit
name: Build and Deploy ASP.NET Core Web API

on:
  push:
    branches:
      - main

jobs:
  build-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup .NET Core SDK
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.0.x'

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --configuration Release

    - name: Publish
      run: dotnet publish -c Release -o ./publish

    - name: Deploy to Azure Web App
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ secrets.AZURE_WEBAPP_NAME }}
        publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
        package: ./publish
üß™ 6. Trigger CI/CD
Push any changes to main branch:

bash
Copy
Edit
git add .
git commit -m "Trigger CI/CD"
git push
GitHub Actions will:
‚úÖ Build
‚úÖ Publish
‚úÖ Deploy to Azure App Service

Visit:
üîó https://<your-app-name>.azurewebsites.net/hello

üìÅ Bonus ‚Äì Folder Structure
Copy
Edit
SampleApi/
‚îÇ
‚îú‚îÄ‚îÄ Controllers/
‚îÇ   ‚îî‚îÄ‚îÄ HelloController.cs
‚îú‚îÄ‚îÄ .github/
‚îÇ   ‚îî‚îÄ‚îÄ workflows/
‚îÇ       ‚îî‚îÄ‚îÄ deploy.yml
‚îú‚îÄ‚îÄ SampleApi.csproj
‚îî‚îÄ‚îÄ Program.cs
üìé Optional Add-ons
Would you like me to send:

‚úÖ Downloadable full ZIP with working project + .yml

üìÑ PDF deployment steps with screenshots?

üß™ Add unit tests, Swagger, Docker, or health checks?


************************Complete Step-by-Step Guide for Deploying ASP.NET Core Web API to Azure App Service using GitHub Actions

üöÄ Project Overview

This guide demonstrates how to deploy an ASP.NET Core Web API to Azure App Service using a fully automated CI/CD pipeline with GitHub Actions.

üìä Technologies Used:

.NET 8 Web API

Azure App Service

GitHub Actions

üìó Step 1: Create ASP.NET Core Web API Project

Option A: Download Ready ZIP

Download: SampleApiWithCI.zip (includes project + GitHub Actions workflow)

Option B: Create Manually

dotnet new webapi -n SampleApi
cd SampleApi

Create HelloController.cs:

[ApiController]
[Route("[controller]")]
public class HelloController : ControllerBase
{
    [HttpGet]
    public string Get() => "Hello from CI/CD Web API!";
}

‚ú® Step 2: Push Project to GitHub

Create a repo (e.g., SampleApi) on GitHub

Initialize Git and push:

git init
git remote add origin https://github.com/rmj242205/SampleApi.git
git add .
git commit -m "Initial commit"
git push -u origin main

***********************************************Fix error
D:\Project\SampleApiWithCI>git push -u origin main
error: src refspec main does not match any
error: failed to push some refs to 'https://github.com/rmj242205/SampleApi.git'
Fixing the Issue
1. You're probably still on the default branch (e.g., master)
Check your current branch:

bash
Copy
Edit
git branch
If it shows:

markdown
Copy
Edit
* master
Rename it to main (GitHub default):

bash
Copy
Edit
git branch -m main
2. Re-add, commit, and push
bash
Copy
Edit
git add .
git commit -m "Initial commit"
git push -u origin main
‚úÖ You Should See:
less
Copy
Edit
Enumerating objects: ...
Counting objects: ...
...
To https://github.com/rmj242205/SampleApi.git
 * [new branch]      main -> main
Once pushed, GitHub Actions will auto-trigger based on your .github/workflows/deploy.yml.

Let me know if you want me to:

Verify .gitignore or

Add README.md and basic Git project setup




‚òÅÔ∏è Step 3: Create Azure App Service

Go to Azure Portal > App Services > + Create

Fill in:

Name: sample-api-cicd

Runtime stack: .NET 8

OS: Windows or Linux

Create and wait for deployment to finish



üîë Step 4: Get Azure Publish Profile

Go to the Azure App Service you just created

Click Get publish profile in the Overview tab

Download .PublishSettings file

Open it and copy its full contents


üîê Step 5: Add Secrets in GitHub

Go to your GitHub repo

Navigate to Settings > Secrets and Variables > Actions

Add the following:

Secret Name

Value (example)

AZURE_WEBAPP_NAME

sample-api-cicd

AZURE_WEBAPP_PUBLISH_PROFILE

Paste entire publish profile XML

*************************
What is ‚ÄúPaste the full XML of publish profile‚Äù?
When you download the Publish Profile from Azure App Service (Step 4), it comes as a .PublishSettings file. This file is an XML file that contains your app credentials and settings for deployment.

üìÑ Example of a Publish Profile (XML):
xml
Copy
Edit
<?xml version="1.0" encoding="utf-8"?>
<publishData>
  <publishProfile profileName="sample-api-cicd - Web Deploy"
      publishMethod="MSDeploy"
      publishUrl="sample-api-cicd.scm.azurewebsites.net:443"
      msdeploySite="sample-api-cicd"
      userName="$sample-api-cicd"
      userPWD="g4h1XXXXXXXXXXXXXX=="
      destinationAppUrl="https://sample-api-cicd.azurewebsites.net"
      />
</publishData>
üì• How to Use This in GitHub Secrets
Open the .PublishSettings file you downloaded in Notepad or VS Code

Copy everything inside (the full XML as above)

Go to your GitHub repo ‚Üí Settings ‚Üí Secrets and variables ‚Üí Actions

Click ‚ÄúNew repository secret‚Äù

Name it AZURE_WEBAPP_PUBLISH_PROFILE

Paste the XML as the value
******************************************************************************

üåÄ Step 6: Create GitHub Actions Workflow

Create this file:
.github/workflows/deploy.yml

name: Build and Deploy ASP.NET Core Web API

on:
  push:
    branches:
      - main

jobs:
  build-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup .NET Core SDK
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.0.x'

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --configuration Release

    - name: Publish
      run: dotnet publish -c Release -o ./publish

    - name: Deploy to Azure Web App
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ secrets.AZURE_WEBAPP_NAME }}
        publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
        package: ./publish

üöó Step 7: Trigger the CI/CD Pipeline

Any push to main will now automatically:

Restore

Build

Publish

Deploy to Azure

git add .
git commit -m "Trigger CI/CD"
git push

üåê Step 8: Test the Deployed API

Navigate to:

https://sample-api-cicd.azurewebsites.net/hello

Expected Output:

Hello from CI/CD Web API!

üìÖ Bonus Tips

Task

Tool / Step

Restart app

Azure Portal > App Service > Restart

Enable Application Insights

Azure App > Monitoring > Enable Insights

Add custom domain

Azure App > Custom Domains

Monitor logs

Azure App > Log stream

Let me know if you'd like a version of this with:

Swagger UI

Health checks

Docker support

PDF with screenshots
